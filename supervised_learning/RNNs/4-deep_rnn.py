#!/usr/bin/env python3
'''
Deep RNN
'''


import numpy as np


def deep_rnn(rnn_cells, X, h_0):
    '''
    Function that performs forward propagation for a deep RNN
    '''
    t, m, i = X.shape  # Get the dimensions of the input data
    l, _, h = h_0.shape  # Get the number of layers and hidden state dimensions from h_0

    # Initialize hidden states array with zeros
    H = np.zeros((t + 1, l, m, h))

    # Initialize output array with zeros
    Y = np.zeros((t, m, rnn_cells[-1].o))  # Use the output size of the last RNN cell for Y

    # Set initial hidden states
    H[0] = h_0

    # Perform forward propagation
    for i in range(t):
        for j in range(l):
            if j == 0:
                # For the first layer, forward propagate using the input data X
                H[i + 1, j], _ = rnn_cells[j].forward(H[i, j], X[i])
            else:
                # For subsequent layers, forward propagate using the previous layer's hidden state
                H[i + 1, j], _ = rnn_cells[j].forward(H[i + 1, j - 1], H[i, j])

        # The output Y at each time step is generated by the last layer's RNN cell
        Y[i], _ = rnn_cells[-1].forward(H[i + 1, -1], X[i])

    return H, Y
